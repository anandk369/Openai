

**Objective**: Create an Android app in Kotlin for personal use to automate solving Multiple Choice Questions (MCQs) in any app by capturing the screen, extracting text, fetching answers via Gemini API, and auto-tapping the correct option. The app should include a floating "Play" button with a settings panel and optional fixed-position buttons for faster tapping.

**Requirements**:

1. **Core Functionality**:
   - **Screen Capture**: Use MediaProjection API to capture a user-defined screen region (default: central area) at selectable resolutions (480p, 720p, 1080p, default: 720p).
   - **OCR**: Use Google ML Kit Cloud Text Recognition API for fast and accurate text extraction. Parse MCQs (question + A, B, C, D options) using Regex.
   - **Gemini API**: Call Gemini 2.0 Flash API via OkHttp with a prompt: "Answer with only one letter (A, B, C, or D): $question\nA) ${options[0]}\nB) ${options[1]}\nC) ${options[2]}\nD) ${options[3]}". Cache answers in Room database.
   - **Auto-Tap**: Use AccessibilityService for dynamic tapping or user-defined coordinates for fixed-position options (A, B, C, D).
   - **Trigger**: Floating "Play" button to start the process (screenshot → OCR → API/cache → tap).

2. **New Features**:
   - **Floating Settings Button**: Below the "Play" button, add a "Settings" button to open a panel with:
     - Screen region selector (draw rectangle to choose MCQ area).
     - Resolution options (480p, 720p, 1080p radio buttons).
     - Option to position four buttons (A, B, C, D) over fixed MCQ option locations for direct coordinate-based tapping.
   - **Fixed Option Buttons**: If MCQ options are at fixed positions, show draggable buttons (A, B, C, D) that auto-trigger based on the Gemini API answer.
   - Save settings (region, resolution, option coordinates) in SharedPreferences.

3. **App Structure**:
   - **Language**: Kotlin.
   - **Modules**:
     - `MainActivity.kt`: Main UI with "Enable Floating Button" and status TextView.
     - `OCRHelper.kt`: Screen capture and ML Kit Cloud OCR.
     - `GeminiAPI.kt`: OkHttp-based API calls and caching.
     - `AutoClickService.kt`: AccessibilityService or coordinate-based tapping.
     - `FloatingButtonService.kt`: Floating "Play", "Settings", and optional A, B, C, D buttons.
   - **Dependencies**: Google ML Kit (Cloud Text Recognition), OkHttp, Room, Coroutines, View Binding.
   - **SDK**: Min SDK 26, Target SDK 34.

4. **UI**:
   - **Main Screen**: TextView (status), Button ("Enable Floating Button").
   - **Floating Buttons**: Draggable "Play" (60dp, circular), "Settings" (40dp), and optional A, B, C, D buttons (40dp). Update icons: Play (▶), Processing (spinner), Success (✓), Error (✗).
   - **Settings Panel**: 300x400dp panel with region selector, resolution radio buttons, and option button positioning.

5. **Permissions**:
   - `AndroidManifest.xml`: INTERNET, FOREGROUND_SERVICE, SYSTEM_ALERT_WINDOW, AccessibilityService.
   - Request runtime permissions for MediaProjection and SYSTEM_ALERT_WINDOW.
   - Guide user to enable AccessibilityService via onboarding.

6. **Optimizations**:
   - Pre-initialize MediaProjection and AccessibilityService.
   - Parallelize OCR and API calls using Coroutines.
   - Pre-process bitmaps (grayscale, high contrast) for faster OCR.
   - Cache answers in Room to skip API calls for repeated questions.
   - Use coordinate-based tapping for fixed-position options to bypass AccessibilityService delays.

7. **Security & Best Practices**:
   - Store Gemini API key in `local.properties`.
   - Add error handling for screenshot, OCR, API, and tap failures.
   - Include code comments and a README with setup/usage instructions.
   - Optimize for battery/performance (minimize UI updates, stop services when not needed).

8. **Constraints**:
   - One question per screen, random questions, high-speed internet available.
   - No root access required.
   - Test with MCQ apps like Quizlet/Kahoot.
   - Expected processing time: 0.6-1.3s (with caching: ~0.5s).

**Deliverables**:
   - Complete Android project with:
     - Source code (`MainActivity.kt`, `OCRHelper.kt`, `GeminiAPI.kt`, `AutoClickService.kt`, `FloatingButtonService.kt`).
     - XML layouts (`activity_main.xml`, `floating_buttons_layout.xml`, `settings_panel_layout.xml`).
     - Drawables (icons for Play, Settings, A, B, C, D, Success, Error, Loading).
     - `AndroidManifest.xml` and `build.gradle`.
   - README with setup (API key, permissions) and usage instructions.

**Output Format**:
   - Organized source code by file.
   - Placeholders for Gemini API endpoint/key with instructions to replace.
   - Log performance metrics (e.g., time for each step) for debugging.

